// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Model
model User {
  id        String    @id @default(uuid())
  email     String    @unique
  name      String?
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  skills           Skill[]         
  bookingsMade     Booking[]       @relation("StudentBookings") 
  bookingsReceived Booking[]       @relation("ProviderBookings") 
  reviewsWritten   Review[]        @relation("UserReviews")  
}

// Skill Model
model Skill {
  id            String    @id @default(uuid())
  title         String
  description   String?
  category      String?
  pricePerHour  Float?

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  bookings      Booking[]
  reviews       Review[]
}

// Booking Model
model Booking {
  id                       String    @id @default(uuid())
  bookingTime              DateTime  
  status                   String    @default("pending") 
  message                  String?   // Student's initial message when booking

  providerMessageOnConfirm String?   // ADD THIS LINE: Provider's message to student upon confirmation

  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt

  skillId                  String    
  skill                    Skill     @relation(fields: [skillId], references: [id], onDelete: Cascade)

  studentId                String    
  student                  User      @relation("StudentBookings", fields: [studentId], references: [id], onDelete: Cascade)

  providerId               String    
  provider                 User      @relation("ProviderBookings", fields: [providerId], references: [id], onDelete: Cascade)
}

// Review Model
model Review {
  id         String   @id @default(uuid())
  rating     Int     
  comment    String?  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt 

  skillId    String   
  skill      Skill    @relation(fields: [skillId], references: [id], onDelete: Cascade)

  reviewerId String  
  reviewer   User     @relation("UserReviews", fields: [reviewerId], references: [id], onDelete: Cascade)

  @@unique([skillId, reviewerId], name: "UniqueReviewPerUserPerSkill")
}